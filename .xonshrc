$EDITOR = '/usr/local/bin/vim'
$VISUAL = '/usr/local/bin/vim'
$COMPLETIONS_CONFIRM = True
$INDENT = "    "
$CASE_SENSITIVE_COMPLETIONS = False
$HISTCONTROL = "ignoredups"
$XONSH_AUTOPAIR = True
$AUTO_CD = True
$XONSH_SHOW_TRACEBACK = True
$SUPPRESS_BRANCH_TIMEOUT_MESSAGE = True
# $UPDATE_COMPLETIONS_ON_KEYPRESS = True
$FOREIGN_ALIASES_SUPPRESS_SKIP_MESSAGE = True
$XONSH_COLOR_STYLE = 'native'
$LS_COLORS="bd=35:*.py=32"
$EXA_COLORS="*.py=38;5;10"

$PIPENV_VENV_IN_PROJECT = True

aliases['l'] = 'exa'
aliases['la'] = 'exa -ahlS --git'
aliases['gs'] = 'git status'
aliases['gd'] = 'git diff'
aliases['ga'] = 'git add'
aliases['gc'] = 'git commit -m'
aliases['activate'] = 'pipenv shell'
aliases['d'] = 'docker '
aliases['dps'] = 'docker ps -a'
aliases['dimgs'] = 'docker images'
aliases['vx'] = 'vim ~/.xonshrc'
aliases['ssh-1080ti'] = 'ssh fujiki@10.60.100.238'
aliases['ssh-titanrtx'] = 'ssh fujiki@10.60.66.151'
aliases['ssh-gpucluster'] = 'ssh hfujiki@10.216.22.149'

# 履歴をpecoに流す
import os
import re
import json
from collections import OrderedDict
from operator import itemgetter
def get_history(session_history=None, return_list=False):
    hist_dir = __xonsh__.env['XONSH_DATA_DIR']
    files = [ os.path.join(hist_dir,f) for f in os.listdir(hist_dir)
              if f.startswith('xonsh-') and f.endswith('.json') ]
    file_hist = []
    for f in files:
        try:
            file_hist.append(json.load(open(f))['data']['cmds'])
        except:
            pass
    cmds = [ ( c['inp'].replace('\n', ''), c['ts'][0] )
                 for cmds in file_hist for c in cmds if c]
    cmds.sort(key=itemgetter(1))
    cmds = [ c[0] for c in cmds[::-1] ]
    if session_history:
        cmds.extend(session_history)
    # dedupe
    zip_with_dummy = list(zip(cmds, [0] * len(cmds)))[::-1]
    cmds = list(OrderedDict(zip_with_dummy).keys())[::-1]
    if return_list:
        return cmds
    else:
        return '\n'.join(cmds)

# キーバインド
from prompt_toolkit.keys import Keys
from prompt_toolkit.filters import (Condition, IsMultiline, HasSelection, EmacsInsertMode, ViInsertMode)
@events.on_ptk_create
def custom_keybindings(bindings, **kw):
    #handler = bindings.registry.add_binding

    # ptk 2.xでは @bindings.add('c-v') とする
    # コマンド入力中にctrl+vでvim編集
    @bindings.add('c-v')
    def edit_in_editor(event):
        event.current_buffer.tempfile_suffix = '.py'
        event.current_buffer.open_in_editor(event.cli)

    # ctrl+rで履歴をpecoに流して検索
    @bindings.add('c-r')
    def select_history(event):
        sess_history = $(history).split('\n')
        hist = get_history(sess_history)
        selected = $(echo @(hist) | peco)
        event.current_buffer.insert_text(selected.strip())

    @bindings.add('c-f')
    def select_file(event):
        r = lambda x: './'+x if os.path.isdir(x) else x
        files = '\n'.join([r(x.split(' ')[-1]) for x in $(ls -l).split('\n')])
        selected = $(echo @(files) | peco)
        event.current_buffer.insert_text(selected.strip())
