[[plugins]]
repo = 'Shougo/defx.nvim'
hook_source = '''
    call defx#custom#column('mark', {
        \ 'readonly_icon': '✗',
        \ 'selected_icon': '✓',
        \ })
    call defx#custom#column('icon', {
        \ 'directory_icon': '▸',
        \ 'opened_icon': '▾',
        \ 'root_icon': ' ',
        \ })
'''
hook_add = '''
autocmd FileType defx call s:defx_my_settings()
    function! s:defx_my_settings() abort
        nnoremap <silent><buffer><expr> <CR> defx#async_action('drop')
        nnoremap <silent><buffer><expr> ~ defx#async_action('cd')
        nnoremap <silent><buffer><expr> .. defx#async_action('cd', ['..'])
        nnoremap <silent><buffer><expr> l defx#async_action('open')

        nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
        nnoremap <silent><buffer><expr> q defx#do_action('quit')

        nnoremap <silent><buffer><expr> o defx#async_action('open_or_close_tree')
        nnoremap <silent><buffer><expr> O defx#async_action('open_tree_recursive')

        nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
        nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
        nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
        nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
        nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
        nnoremap <silent><buffer><expr> N defx#do_action('new_file')
        nnoremap <silent><buffer><expr> c defx#do_action('copy')
        nnoremap <silent><buffer><expr> d defx#do_action('remove_trash')
        nnoremap <silent><buffer><expr> m defx#do_action('move')
        nnoremap <silent><buffer><expr> p defx#do_action('paste')
        nnoremap <silent><buffer><expr> r defx#do_action('rename')
        nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
        nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
    endfunction
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim']
on_cmd = 'denite'
hook_add = '''
    autocmd FileType denite call s:denite_my_settings()
    function! s:denite_my_settings() abort
        nnoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
        nnoremap <silent><buffer><expr> d
        \ denite#do_map('do_action', 'delete')
        nnoremap <silent><buffer><expr> p
        \ denite#do_map('do_action', 'preview')
        nnoremap <silent><buffer><expr> q
        \ denite#do_map('quit')
        nnoremap <silent><buffer><expr> i
        \ denite#do_map('open_filter_buffer')
        nnoremap <silent><buffer><expr> <Space>
        \ denite#do_map('toggle_select').'j'
    endfunction"
'''
hook_source = '''
    call denite#custom#source('file/old', 'matchers',
        \ ['matcher/fruzzy', 'matcher/project_files'])
    call denite#custom#source('file/rec', 'matchers',
        \ ['matcher/fruzzy'])
    call denite#custom#source('file/old,ghq', 'converters',
        \ ['converter/relative_word', 'converter/relative_abbr'])
    call denite#custom#option('default', 'prompt', '> ')
    " tabopen や vsplit のキーバインドを割り当て
    call denite#custom#map('insert', "<C-t>", '<denite:do_action:tabopen>')
    " split で開く
    call denite#custom#map('normal', '<C-j>', '<denite:do_action:split>', 'noremap')
    call denite#custom#map('normal', '<C-k>', '<denite:do_action:vsplit>', 'noremap')
    call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
        \ [ '.git/', '.ropeproject/', '__pycache__/',
        \   'venv/', '.venv/', 'images/', '*.min.*', 'img/', 'fonts/'])])
'''

[[plugins]]
repo = 'raghur/fruzzy'
on_source = ['denite.nvim']
hook_source = 'let g:fruzzy#sortonempty = 0'
hook_post_update = 'call fruzzy#install()'

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
on_ft = ['python']
hook_source = '''
    let g:deoplete#enable_at_startup = 1
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction
    call deoplete#custom#source('tabnine', 'rank', 300)
    call deoplete#custom#source('tabnine', 'min_pattern_length', 2)
    call deoplete#custom#var('tabnine', {
        \ 'line_limit': 500,
        \ 'max_num_results': 20,
        \ })
'''

[[plugins]]
repo = 'vim-python/python-syntax'
on_ft = ['python']
hook_source = '''
    let g:python_highlight_class_vars = 1
    let g:python_highlight_all = 1
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = ['python']

[[plugins]]
repo = 'w0rp/ale'
on_ft = ['python']
